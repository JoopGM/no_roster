<?php
/*
 * FIXME: change DD code to array
 */
define("SITE_MAIL", "info@nlhcrew.com");
define("SITE_DISPLAY_NAME", "NLHCrew.com");
define("VIS_DEFAULT", 'default');

/**
 * implements hook_permission
 */
function no_roster_permission() {
  return array(
    'use_norwegian_roster' => array(
      'title' => t('Use Norwegian roster'),
    ),
  );
}

/**
 * Implements hook_menu
 */
function no_roster_menu() {
  $items['no_test'] = array(
  'page callback' => 'no_test',
  'access callback' => 'user_access',
  'access arguments' => array('use_norwegian_roster'),
  //'access arguments' => array(TRUE),
  'type' => MENU_CALLBACK,
  );
  $items['no_roster/load_roster'] = array(
    'page callback' => 'load_roster',
    'access callback' => 'user_access',
    'access arguments' => array('use_norwegian_roster'),
    'type' => MENU_CALLBACK,
    );
  return $items;
}

/**
 * ASP.NET web site scraping script;
 * Developed by MishaInTheCloud.com
 * Copyright 2009 MishaInTheCloud.com. All rights reserved.
 */
function load_roster() {
  $regs = array();
  $roster = array();
 // header("Content-Type: text/xml");
  // urls to call
  $urlLogin = "https://cwp.norwegian.no/CWP_WA/CWPLogin.aspx";
  $urlSecuredPage = "https://cwp.norwegian.no/CWP_WA/CWP_RosterTW.aspx?EMPNO=17001";

  // POST names and values to support login
  $nameUsername = 'ctrlUserName';       // the name of the username textbox on the login form
  $namePassword = 'ctrlPassword';       // the name of the password textbox on the login form
  $nameLoginBtn = 'btnLogin';          // the name of the login button (submit) on the login form
  $valUsername = 'SIJO';        // the value to submit for the username
  $valPassword = '1234';        // the value to submit for the password
  $valLoginBtn = 'Login';             // the text value of the login button itself
  // the path to a file we can read/write; this will
  // store cookies we need for accessing secured pages
  $cookies = 'cookies.txt';

  // regular expressions to parse out the special ASP.NET
  // values for __VIEWSTATE and __EVENTVALIDATION
  $regexViewstate = '/__VIEWSTATE\" value=\"(.*)\"/i';
  $regexEventVal = '/__EVENTVALIDATION\" value=\"(.*)\"/i';

  // initialize a curl handle; we'll use this handle throughout the script
  $ch = curl_init();


  /* * **********************************************
   * first, issue a GET call to the ASP.NET login
   *   page.  This is necessary to retrieve the
   *   __VIEWSTATE and __EVENTVALIDATION values
   *   that the server issues
   * ********************************************** */
  curl_setopt($ch, CURLOPT_URL, $urlLogin);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
  $data = curl_exec($ch);

  // from the returned html, parse out the __VIEWSTATE and __EVENTVALIDATION values
  $viewstate = _regexExtract($data, $regexViewstate, $regs, 1);
  $eventval = _regexExtract($data, $regexEventVal, $regs, 1);

  /* * **********************************************
   * now issue a second call to the Login page;
   *   this time, it will be a POST; we'll send back
   *   as post data the __VIEWSTATE and __EVENTVALIDATION
   *   values the server previously sent us, as well as the
   *   username/password.  We'll also set up a cookie
   *   jar to retrieve the authentication cookie that
   *   the server will generate and send us upon login.
   * ********************************************** */
  $postData = '__VIEWSTATE=' . rawurlencode($viewstate)
  . '&__EVENTVALIDATION=' . rawurlencode($eventval)
  . '&' . $nameUsername . '=' . $valUsername
  . '&' . $namePassword . '=' . $valPassword
  . '&' . $nameLoginBtn . '=' . $valLoginBtn;

  curl_setOpt($ch, CURLOPT_POST, TRUE);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);
  curl_setopt($ch, CURLOPT_URL, $urlLogin);
  //curl_setopt($ch, CURLOPT_COOKIEJAR, $cookieFile);
  curl_setopt($ch, CURLOPT_COOKIEJAR, $cookies);
  $data = curl_exec($ch);


  /* * **********************************************
   * with the authentication cookie in the jar,
   * we'll now issue a GET to the secured page;
   * we set curl's COOKIEFILE option to the same
   * file we used for the jar before to ensure the
   * authentication cookie is sent back to the
   * server
   * ********************************************** */
  curl_setOpt($ch, CURLOPT_POST, FALSE);
  curl_setopt($ch, CURLOPT_URL, $urlSecuredPage);
  curl_setopt($ch, CURLOPT_COOKIEFILE, $cookies);

  $data = curl_exec($ch);
  curl_close($ch);

  // at this point the secured page may be parsed for values, or additional POSTS made to submit parameters
  // and retrieve data.  For this sample, we'll just echo the results.

  $dom = new DOMDocument;
  // echo $data;
  if ($dom->loadHTML($data)) {
    $xpath = new DOMXPath($dom);
    $node_list = $xpath-> query("//tr[@class='RosterOddRow' or @class='RosterEvenRow']");
    $days = array();
    foreach ($node_list as $tr) {
      $day = array();
      //echo $dom->saveHtml($tr), PHP_EOL;
      $sub_dom = new DOMDocument();
      $sub_dom-> loadHTML($dom->saveHtml($tr));
      $sub_xpath = new DOMXPath($sub_dom);
      $result = $sub_xpath->query("//td[@class='RosterRowActivity']");
      if ($result-> length) {  // we have a result
        if ($result->item(0)->nodeValue <> '---') {
          $day['checkin_date'] = $sub_xpath-> query("//td[@class = 'RosterRowCheckin']")->item(0)->nodeValue;
          $day['activity'] = $result->item(0)->nodeValue;
          $day['dep'] = $sub_xpath-> query("//td[@class = 'RosterRowDep']")->item(0)->nodeValue;
          $day['arr'] = $sub_xpath-> query("//td[@class = 'RosterRowArr']")->item(0)->nodeValue;
          $day['start'] = $sub_xpath-> query("//td[@class = 'RosterRowStart']")->item(0)->nodeValue;
          $day['end'] = $sub_xpath-> query("//td[@class = 'RosterRowEnd']")->item(0)->nodeValue;
          $day['checkout'] = $sub_xpath-> query("//td[@class = 'RosterRowCheckout']")->item(0)->nodeValue;
          $day['duty_desig'] = $sub_xpath-> query("//td[@class = 'RosterRowDutyDesig']")->item(0)->nodeValue;
          $day['cat'] = $sub_xpath-> query("//td[@class = 'RosterRowAsgCat']")->item(0)->nodeValue;
          $days[] = $day;
        }
      }
    }
    //debug($days, 'Raw days array as scraped');;
    $complete_roster = complete_roster($days);
    //debug($complete_roster);
    post_to_calendar($complete_roster);
    // drupal_goto('<front>')
  }
  else {
    drupal_set_message(t('Dom document not loaded after scrape.', 'error'));
  }
}

function post_to_calendar($roster) {
  //debug($roster, 'post to calendar');
  error_reporting(E_ALL);
  require_once 'google/src/Google_Client.php';
  require_once 'google/src/contrib/Google_CalendarService.php';
  if(session_id() == '') {
    session_start();
  }
  if ((isset($_SESSION)) && (!empty($_SESSION))) {
    echo "There are cookies<br>";
    echo "<pre>";
    print_r($_SESSION);
    echo "</pre>";
  }

  $client = new Google_Client(array('use_objects' => true));
  $client->setApplicationName("NLHCREW.com Roster");
  $client->setClientId('786455466975-dsplfoagg6usnngs876qshdtf7j6b67f.apps.googleusercontent.com');
  $client->setClientSecret('APNdZIR2Y7nMqy2SM93viZFu');
  $client->setRedirectUri('http://dev7.yagoserver.com/no_roster/load_roster');
  //$client->setDeveloperKey('AIzaSyB4amN0V6XsmNgsg2-M7NBZf9Zp5b1LqJI');

  $cal = new Google_CalendarService($client);

  if (isset($_GET['logout'])) {
    echo "<br><br><font size=+2>Logging out</font>";
    unset($_SESSION['token']);
  }

  if (isset($_GET['code'])) {
    echo "<br>I got a code from Google = ".$_GET['code']; // You won't see this if redirected later
    $client->authenticate($_GET['code']);
    $_SESSION['token'] = $client->getAccessToken();
    header('Location: http://' . $_SERVER['HTTP_HOST'] . $_SERVER['PHP_SELF']);
    echo "<br>I got the token = ".$_SESSION['token']; // <-- not needed to get here unless location uncommented
  }

  if (isset($_SESSION['token'])) {
    echo "<br>Getting access";
    $client->setAccessToken($_SESSION['token']);
  }

  if ($client->getAccessToken()) {
    echo "<hr><font size=+1>I have access to your calendar</font>";
    // Get all the events from NLH as from today, so that we can clear them
    // in order to make new ones.

    $start_date = new DateTime('now');
    $end_date = clone $start_date;
    $end_date->modify('+60 day');

    $minCheck = date(DATE_ATOM, $start_date->getTimestamp());
    $maxCheck = date(DATE_ATOM, $end_date-> getTimestamp());
    $seek_array = array(
      'timeMin' => $minCheck,
      'timeMax' => $maxCheck,
      'q' => 'NLHCREW',
    );
    $present_events = $cal->events->listEvents('joopsintjago@gmail.com', $seek_array);

    foreach ($present_events->getItems() as $this_event) {
      $result[] =
       // $this_event->getStart()->getDateTime() . " | "
       // . $this_event->getSummary() . " | "
        $this_event->getSource()->title;
      //debug($this_event);
    }
    debug($result);

    //$all_events = $cal->events->listEvents('joopsintjago@gmail.com');
    /*foreach ($all_events->getItems() as $this_event) {
      $
    }
    */
    $nlh = array('nlh' => 'nlh');
    $test_prop = array('test' => 'test');
    foreach ($roster as $day) {
        $event = new Google_Event();
        $event-> setSummary($day['activity']); //"summary": string,
        $event-> setDescription($day['description']); //"description": string,
          $source = new Google_EventSource();
          $source-> setTitle('NLHCREW');
          $source-> setUrl('http://www.nlhcrew.com');
        $event->setSource($source);
          $extended = new Google_EventExtendedProperties();
          $extended->setPrivate($nlh);
        $event-> setExtendedProperties($extended);
          $prop = new Google_EventExtendedProperties();
          $prop->setShared($test_prop);
        $event-> setExtendedProperties($prop);
          $start = new Google_EventDateTime();
          $start-> setDateTime($day['checkin']);
        $event-> setStart($start);
          $end = new Google_EventDateTime();
          $end-> setDateTime($day['checkout']);
        $event-> setEnd($end);
        $event-> setVisibility(VIS_DEFAULT);
        //echo "<pre>"; echo  print_r($event) ; echo "</pre>";
        //debug($event);
        // $createdEvent = $cal->events->insert('joopsintjago@gmail.com', $event);
        //  echo "<br><font size=+1>Event created</font>";
      }
    echo "<hr><br><font size=+1>Already connected</font> (No need to login)";
  }
  else {
    $authUrl = $client->createAuthUrl();
    //fixme: See if we can do this without clicking
    print "<hr><br><font size=+2><a href='". $authUrl . "'>" . t("Click this link to authorize this website to access your calendar create your roster")   .  "</a></font>";
  }

  $url = 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['PHP_SELF'];
  echo "<br><br><font size=+2><a href='" . "$url" . "?logout>Logout</a></font>";
}

/*
 * @$roster array. roster as scraped from the webportal. function will further enhance the
 * array and return a better roster.
 */
function complete_roster($roster){
  require_once('spyc/Spyc.php');
  $rostercodes = Spyc::YAMLLoad('/var/www/vhosts/yagoserver.com/httpdocs/dev7/drupal/sites/all/modules/no_roster/rostercodes.yaml');

  // if first date in the roster is empty we will unset it
  if (empty($roster[0]['checkin_date'])) {
    unset($roster[0]);
  }
  $today = '';
  foreach ($roster as $key => $day) {
    // DEBUG  echo 'key: ' . $key . '  |  day: ' . $day . '<br>';

    // FIXME: results in error if first date is unknown
    $roster[$key]['checkin_date'] = rtrim((strlen($day['checkin_date']) < 6 ? $today : $day['checkin_date']));
    $today = $roster[$key]['checkin_date'];  // if an empty date comes in it will be set to this value which is the previous date

    // Change $roster[$key]['date'] to DateTime RFC3339 format
    $dt = DateTime::createFromFormat('dmy', $today);
    if (!$dt) {
      drupal_set_message('Roster import failed due RFC DateTimeError on key: ' . $key, 'error');
      return false;
    }
    $roster[$key]['checkin_date'] = $dt-> format('d-m-Y');

    // If event ends on next day(s)
    $end_array = complete_end_time($day['end']);
    $roster[$key]['event_end'] = $end_array['time'];
    $roster[$key]['extra_days'] = $end_array['days'];

    // if Checkin /Checkout time not set, set it to start and End
    $roster[$key]['checkin'] = (empty($day['checkin']) ? $day['start'] : $day['checkin']);
    $roster[$key]['checkout'] = (empty($day['checkout']) ? $roster[$key]['event_end'] : $day['checkout']);

    // Complete Checkin and Checkout times as RFC3339 data
    $roster[$key]['checkin'] = complete_event_datetime($roster[$key]['checkin_date'], $roster[$key]['checkin']);
    $roster[$key]['checkout'] = complete_event_datetime($roster[$key]['checkin_date'], $roster[$key]['checkout'], $roster[$key]['extra_days']);

    foreach ($day as $label => $value) {
      // DEBUG: echo 'label: ' . $label . ' value : ' . $value . '<br>';
      // Fill in roster codes
      if (isset($rostercodes[$value])) {
        $roster[$key][$label] = $rostercodes[$value];
      }
    }

    // Compose the description:
    $roster[$key]['description'] =
    $roster[$key]['activity'] . ' | ' . $roster[$key]['dep'] . '-'  . $roster[$key]['start'] . ' - ' . $roster[$key]['dep'] . '-' . $roster[$key]['end'] . '<br>' .
    'Category: ' . $roster[$key]['cat'] . ' | Duty designator: ' . $roster[$key]['duty_desig'];
  }


  //debug($roster,'end complete roster');
  return $roster;
}

/* * **********************************************
 * utility function: regexExtract
 *    use the given regular expression to extract
 *    a value from the given text;  $regs will
 *    be set to an array of all group values
 *    (assuming a match) and the nthValue item
 *    from the array is returned as a string
 * ********************************************** */

function _regexExtract($text, $regex, $regs, $nthValue) {
  if (preg_match($regex, $text, $regs)) {
    $result = $regs[$nthValue];
  } else {
    $result = "";
  }
  return $result;
}

function xml_to_array($root) {
  $result = array();

  if ($root->hasAttributes()) {
    $attrs = $root->attributes;
    foreach ($attrs as $attr) {
      $result['@attributes'][$attr->name] = $attr->value;
    }
  }

  if ($root->hasChildNodes()) {
    $children = $root->childNodes;
    if ($children->length == 1) {
      $child = $children->item(0);
      if ($child->nodeType == XML_TEXT_NODE) {
        $result['_value'] = $child->nodeValue;
        return count($result) == 1
        ? $result['_value']
        : $result;
      }
    }
    $groups = array();
    foreach ($children as $child) {
      if (!isset($result[$child->nodeName])) {
        $result[$child->nodeName] = xml_to_array($child);
      } else {
        if (!isset($groups[$child->nodeName])) {
          $result[$child->nodeName] = array($result[$child->nodeName]);
          $groups[$child->nodeName] = 1;
        }
        $result[$child->nodeName][] = xml_to_array($child);
      }
    }
  }

  return $result;
}


function dnl2array($domnodelist) {
  $return = array();
  for ($i = 0; $i < $domnodelist->length; ++$i) {
    echo 'tel';
    $return[] = $domnodelist->item($i);
  }
  return $return;
}

function complete_event_datetime($date, $event_time, $extra_days = null) {
  $time_array = explode(" ", $event_time);
  $dt_str = $date . $event_time;
  $dt = DateTime::createFromFormat('d-m-YH:i', $dt_str);
  // DEBUG: echo $key . ' | event time  |' . $event_time;
  //var_dump($time_array); echo '<br>';
  if (!is_null($extra_days)) {
    //echo 'extra ' . $extra_days  . '<br>';
    $dt->add(new DateInterval('P' . $extra_days . 'D'));
  }
  return $dt->format(DATE_ATOM);//
  //return $dt_str;
}

/*
 * takes evemd end time  and seperates the extra days
 * 08:00 (+2) becomes array('time' = "08:00", 'days' = 2)
 */
function complete_end_time($time) {
  $time_array = explode(" ", $time);
  $time_array['time'] = substr($time,0,5);
  if (isset($time_array[1])) {
    $time_array['days'] = substr($time_array[1],2,1);
  }
  else {
    $time_array['days'] = 0;
  }
  return $time_array;
}


/**
 * Will output in a similar form to print_r, but the nodes are xml so can be collapsed in browsers
 * @param mixed $mixed
 */
function print_r_xml($mixed) {
  // capture the output of print_r
  $out = print_r($mixed, true);

  // Replace the root item with a struct
  // MATCH : '<start>element<newline> ('
  $root_pattern = '/[ \t]*([a-z0-9 \t_]+)\n[ \t]*\(/i';
  $root_replace_pattern = '<struct name="root" type="\\1">';
  $out = preg_replace($root_pattern, $root_replace_pattern, $out, 1);

  // Replace array and object items structs
  // MATCH : '[element] => <newline> ('
  $struct_pattern = '/[ \t]*\[([^\]]+)\][ \t]*\=\>[ \t]*([a-z0-9 \t_]+)\n[ \t]*\(/miU';
  $struct_replace_pattern = '<struct name="\\1" type="\\2">';
  $out = preg_replace($struct_pattern, $struct_replace_pattern, $out);
  // replace ')' on its own on a new line (surrounded by whitespace is ok) with '</var>
  $out = preg_replace('/^\s*\)\s*$/m', '</struct>', $out);

  // Replace simple key=>values with vars
  // MATCH : '[element] => value<newline>'
  $var_pattern = '/[ \t]*\[([^\]]+)\][ \t]*\=\>[ \t]*([a-z0-9 \t_\S]+)/i';
  $var_replace_pattern = '<var name="\\1">\\2</var>';
  $out = preg_replace($var_pattern, $var_replace_pattern, $out);

  $out =  trim($out);
  $out='<?xml version="1.0"?><data>'.$out.'</data>';

  return $out;
}
